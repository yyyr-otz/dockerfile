name: docker-build
on:
  workflow_dispatch:
    inputs:
      target_dir:
        description: '目标镜像目录 ("all"构建所有目录，或输入目录前缀模糊匹配)'
        required: true
        default: 'all'
  schedule:
    - cron: '0 2 * * 4'
env:
  REGISTRY: ghcr.io
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Determine build targets
        id: determine-targets
        run: |
          # 确保jq可用
          sudo apt-get -qq install jq > /dev/null 2>&1 || true
          
          # 检查触发方式
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "定时任务触发，构建所有目录"
            TARGET_DIRS=$(find . -maxdepth 1 -type d -name '[!.]*' ! -name '.github' -printf '%f\n' | sort)
          else
            # 手动触发
            if [ "${{ inputs.target_dir }}" = "all" ]; then
              echo "手动触发，构建所有目录"
              TARGET_DIRS=$(find . -maxdepth 1 -type d -name '[!.]*' ! -name '.github' -printf '%f\n' | sort)
            else
              echo "手动触发，构建匹配前缀的目录: ${{ inputs.target_dir }}"
              # 使用通配符匹配以输入值开头的目录
              TARGET_DIRS=$(find . -maxdepth 1 -type d -name "${{ inputs.target_dir }}*" ! -name '.github' -printf '%f\n' | sort)
              
              # 如果没有找到匹配目录则报错
              if [ -z "$TARGET_DIRS" ]; then
                echo "错误: 没有找到以 '${{ inputs.target_dir }}' 开头的目录"
                exit 1
              fi
            fi
          fi
          
          # 调试输出
          echo "找到的目录:"
          echo "$TARGET_DIRS"
          
          # 安全处理输出为JSON数组
          TARGET_DIRS_JSON=$(echo "$TARGET_DIRS" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "TARGET_DIRS=${TARGET_DIRS_JSON}" >> $GITHUB_OUTPUT
          echo "已设置输出: TARGET_DIRS=${TARGET_DIRS_JSON}"
          
      - name: Build and push Docker images
        run: |
          echo "准备构建的目录列表: ${{ steps.determine-targets.outputs.TARGET_DIRS }}"
          for DIR in $(echo '${{ steps.determine-targets.outputs.TARGET_DIRS }}' | jq -r '.[]'); do
            echo "== 正在处理目录: $DIR =="
            
            # 分割目录名
            IFS='-' read -ra NAME_PARTS <<< "$DIR"
            IMAGE_NAME="${{ github.repository_owner }}/${NAME_PARTS[0]}"
            TAG_NAME=$(IFS='-'; echo "${NAME_PARTS[*]:1}")
            
            echo "镜像名称: $IMAGE_NAME"
            echo "标签名称: $TAG_NAME"
            
            # 构建并推送
            cd "$DIR"
            docker build -t ${{ env.REGISTRY }}/$IMAGE_NAME:$TAG_NAME .
            docker push ${{ env.REGISTRY }}/$IMAGE_NAME:$TAG_NAME
            cd ..
            
            echo "== 完成处理: $DIR =="
            echo ""
          done
          
      - name: Clean
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1
