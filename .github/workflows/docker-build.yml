name: docker-build
on: 
  workflow_dispatch:
    inputs:
      target_dir:
        description: '目标镜像目录 ("all"构建所有目录)'
        required: true
        default: 'all'
  schedule:
    - cron: '0 2 * * 4'
env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Determine build targets
        id: determine-targets
        run: |
          # 如果是定时触发，等同于手动输入"all"
          if [ "${{ github.event_name }}" = "schedule" ]; then
            TARGET_DIRS=$(find . -maxdepth 1 -type d ! -name '.' ! -name '.github' -printf '%f\n')
            echo "定时任务触发，构建所有目录"
          else
            if [ "${{ inputs.target_dir }}" = "all" ]; then
              TARGET_DIRS=$(find . -maxdepth 1 -type d ! -name '.' ! -name '.github' -printf '%f\n')
            else
              TARGET_DIRS="${{ inputs.target_dir }}"
            fi
          fi
          echo "TARGET_DIRS=${TARGET_DIRS}" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker images
        run: |
          for DIR in ${{ steps.determine-targets.outputs.TARGET_DIRS }}; do
            echo "Processing directory: $DIR"
            
            # Split directory name by first hyphen
            IFS='-' read -ra NAME_PARTS <<< "$DIR"
            IMAGE_NAME="${NAME_PARTS[0]}"
            TAG_NAME=$(IFS='-'; echo "${NAME_PARTS[*]:1}")
            
            echo "Building image: $IMAGE_NAME:$TAG_NAME"
            
            cd "$DIR"
            docker build -t ${{ env.REGISTRY }}/$IMAGE_NAME:$TAG_NAME .
            docker push ${{ env.REGISTRY }}/$IMAGE_NAME:$TAG_NAME
            cd ..
          done
          
      - name: Clean
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1
