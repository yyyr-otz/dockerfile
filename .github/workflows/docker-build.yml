name: docker-build
on:
  workflow_dispatch:
    inputs:
      target_dir:
        description: '目标镜像目录 ("all"构建所有目录，或输入目录前缀模糊匹配)'
        required: true
        default: 'all'
  schedule:
    - cron: '0 2 * * 4'

env:
  REGISTRY: ghcr.io

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find target directories
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "定时任务触发，构建所有目录"
            TARGET_DIRS=$(find . -maxdepth 1 -type d -name '[!.]*' ! -name '.github' -printf '%f\n' | sort)
          elif [ "${{ github.event.inputs.target_dir }}" = "all" ]; then
            echo "手动触发，构建所有目录"
            TARGET_DIRS=$(find . -maxdepth 1 -type d -name '[!.]*' ! -name '.github' -printf '%f\n' | sort)
          else
            echo "手动触发，构建匹配前缀的目录: ${{ github.event.inputs.target_dir }}"
            TARGET_DIRS=$(find . -maxdepth 1 -type d -name "${{ github.event.inputs.target_dir }}*" ! -name '.github' -printf '%f\n' | sort)
            [ -z "$TARGET_DIRS" ] && { echo "错误: 没有找到匹配目录"; exit 1; }
          fi
          # 生成矩阵JSON
          MATRIX_JSON=$(echo "$TARGET_DIRS" | jq -R -s 'split("\n") | map(select(. != "")) | {"include": map({"dir": .})}')
          # 调试输出
          echo "生成的矩阵:"
          echo "$MATRIX_JSON"
          # 写入GitHub输出（使用heredoc格式）
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      packages: write
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false  # 允许单个构建失败不影响其他
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        run: |
          echo "== 并行构建目录: ${{ matrix.dir }} =="
          
          # 解析目录名格式：镜像名-标签
          IFS='-' read -ra PARTS <<< "${{ matrix.dir }}"
          IMAGE_NAME=${PARTS[0]}
          TAG_NAME=$(IFS='-'; echo "${PARTS[*]:1}")

          # 构建并推送
          docker build -t ${{ env.REGISTRY }}/${{ github.repository_owner }}/$IMAGE_NAME:$TAG_NAME ./${{ matrix.dir }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/$IMAGE_NAME:$TAG_NAME

          # 清理无标签镜像（可选）
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/${{ github.repository_owner }}/packages/container/$IMAGE_NAME/versions" \
            | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id' \
            | xargs -I {} curl -X DELETE \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/users/${{ github.repository_owner }}/packages/container/$IMAGE_NAME/versions/{}"

  cleanup:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Clean old workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1
